# This workflow is designed for building and testing a Node.js project with PostgreSQL

name: Node.js.test_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on pull request events for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches:
      main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job is responsible for building the Node.js project
  build:
    name: node.js.test build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Define the PostgreSQL service
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
         - 5432:5432

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Check out the repository to the runner's working directory
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment with the specified version
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install aws-sdk
      - name: Install aws-sdk
        run: npm install aws-sdk

      # Step 5: Install multer
      - name: Install multer
        run: npm install express multer

      # Step 6: Install bcrypt
      - name: Install bcrypt
        run: npm install bcrypt

      # Step 7: Install bcrypt
      - name: Install winston
        run: npm install winston

      # Step 8: Install bcrypt
      - name: Install node-statsd
        run: npm install node-statsd

      # Step 9: Set up environment variables from GitHub secrets
      - run: |
          echo > .env
          ls -al | grep .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env

      # Step 10: Run tests
      - name: Run tests
        run: npm test
