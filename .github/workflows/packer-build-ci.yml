name: Packer Build CI

# Trigger the workflow only on push to the main branch (after a PR is merged).
on:
  push:
    branches: [ "main" ] # Only trigger when code is pushed to the 'main' branch.

jobs:
  packer-build:
    name: Packer Build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code from GitHub.
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment on the runner.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Specify the Node.js version.

      # Step 3: Install PostgreSQL on the GitHub Actions runner.
      - name: Install PostgreSQL
        run: |
          sudo apt update
          sudo apt install -y postgresql postgresql-contrib
          sudo systemctl start postgresql 
    
      # Step 4: Configure PostgreSQL by creating the database and user with the credentials stored in secrets.
      - name: Configure PostgreSQL
        run: |
          sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DB_NAME }};" # Create the database.
          sudo -u postgres psql -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';" # Create the user.
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DB_NAME }} TO ${{ secrets.DB_USER }};" # Grant privileges to the user.

      # Step 5: Create a .env file and store environment variables in it, using GitHub secrets.
      - name: Configure Environment Variables
        run: |
          echo > .env # Create an empty .env file.
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env # Add the NODE_ENV variable.
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env # Add the database host.
          echo DB_USER=${{ secrets.DB_USER }} >> .env # Add the database user.
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env # Add the database password.
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env # Add the database name.
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env # Add the database port.
          echo PORT=${{ secrets.PORT }} >> .env # Add the application port.
          echo HOSTNAME=${{ secrets.HOSTNAME }} >> .env # Add the hostname.

      # Step 6: Zip the web application into a single archive to be included in the custom AMI.
      - name: Zip webapp
        run: |
          zip -r webapp.zip ./ # Zip all files in the current directory.
          ls -al # List all files to verify the webapp.zip is created.

      # Step 7: Run your project's tests (if any) to ensure everything is functioning before building the AMI.
      - name: Run Test
        run: |
          npm install # Install the Node.js dependencies.
          npm install bcrypt
          npm test # Run the tests (ensure your tests are configured).

      # Step 8: Configure AWS credentials using GitHub secrets for authentication.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Access Key from secrets.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret Key from secrets.
          aws-region: ${{ secrets.AWS_REGION }} # AWS Region where the resources are created.


      # Step 9: Set up Packer on the GitHub Actions runner.
      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: 'latest' # Use the latest version of Packer.

      # Step 10: Run the Packer format command to ensure proper formatting of the Packer template.
      - name: Packer Format
        run: packer fmt . # Format the Packer configuration.
        id: format

      # Step 11: Initialize Packer to download and set up all required dependencies.
      - name: Packer Init
        run: "packer init ./aws.pkr.hcl" # Initialize Packer with the AWS Packer configuration.

      # Step 12: Validate the Packer configuration using the variables file created in step 10.
      - name: Packer Validate
        id: validate
        run: "packer validate ./aws.pkr.hcl" # Validate the Packer configuration.  --var-file=aws.pkrvars.hcl 

      # Step 13: Build the Packer image (custom AMI) if validation succeeds.
      - name: Packer Build
        id: build
        run: "packer build ./aws.pkr.hcl" # Build the custom image (AMI). --var-file=aws.pkrvars.hcl 
